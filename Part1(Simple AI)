#include <stdio.h>
#include <math.h>
#include <stdbool.h>

void printBoard(char board[][26], int n) {
    char numr = 'a';
    printf("  ");
    while (numr < n + 'a') {
        printf("%c", numr);
        numr++;
    }
    printf("\n");

    for (int row = 0; row < n; row++) {
        printf("%c ", 'a' + row);
        for (int col = 0; col < n; col++) {
            printf("%c", board[row][col]);
        }
        printf("\n");
    }
}

char oppositeColor(char currentColor) {
    if (currentColor == 'B') {
        currentColor = 'W';
        return currentColor;
    } else if (currentColor == 'W') {
        currentColor = 'B';
        return currentColor;
    }
}

bool empty(char board[][26], char row, char col) {
    if (board[row - 'a'][col - 'a'] == 'U') {
        return true;
    } else {
        return false;
    }
}

bool positionInBounds(int n, int row, int col) {
    if (row < 0 || col < 0 || row >= n || col >= n) {
        return false;
    } else {
        return true;
    }
}

bool checkLegalInDirection(char board[][26], int n, int row, int col, char colour, int deltaRow, int deltaCol) {
    if (!empty(board, row + 'a', col + 'a')) {
        return false;
    }

    row = row + deltaRow;
    col = col + deltaCol;

    if (!positionInBounds(n, row, col)) {
        return false;
    }

    if (board[row][col] == oppositeColor(colour)) {
        row = row + deltaRow;
        col = col + deltaCol;

        while (positionInBounds(n, row, col) && board[row][col] != 'U') {
            if (board[row][col] == colour) {
                return true;
            } else {
                row = row + deltaRow;
                col = col + deltaCol;
            }
        }
    }

    return false;
}

bool validMove(char board[][26], int n, char colour, char row, char col) {
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            int rows = row - 'a';
            int cols = col - 'a';
            if (checkLegalInDirection(board, n, rows, cols, colour, i, j)) {
                return true;
            }
        }
    }
    return false;
}

bool avaliableMoves(char board[][26], int n, char colour) {
    for (char row = 'a'; row < 'a' + n; row++) {
        for (char col = 'a'; col < 'a' + n; col++) {
            if (validMove(board, n, colour, row, col)) {
                return true;
            }
        }
    }
    return false;
}

int countBeforeFlip(char board[][26], int n, char colour) {
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == colour) {
                count++;
            }
        }
    }

    return count;
}

void flip(char board[][26], int n, char row, char col, char colour) {
    char opp = oppositeColor(colour);
    board[row - 'a'][col - 'a'] = colour;

    int rows = row - 'a';
    int cols = col - 'a';

    for (int deltaRow = -1; deltaRow <= 1; deltaRow++) {
        for (int deltaCol = -1; deltaCol <= 1; deltaCol++) {
            if (deltaRow == 0 && deltaCol == 0 ||
                !positionInBounds(n, rows + deltaRow, cols + deltaCol)) {
                continue;
            }

            int newRow = rows + deltaRow;
            int newCol = cols + deltaCol;
            while (board[newRow][newCol] == opp) {
                newRow += deltaRow;
                newCol += deltaCol;
                if (!positionInBounds(n, newRow, newCol)) {
                    break;
                }
            }

            if (positionInBounds(n, newRow, newCol) &&
                board[newRow][newCol] == colour) {
                while (newRow != rows + deltaRow || newCol != cols + deltaCol) {
                    newRow -= deltaRow;
                    newCol -= deltaCol;
                    board[newRow][newCol] = colour;
                }
            }
        }
    }
}

int numberOfPieces(char board[][26], int n, char colour) {
    int total = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == colour) {
                total++;
            }
        }
    }
    return total;
}

int countAfterFlip(char board[][26], int n, char row, char col, char colour) {
    flip(board, n, row, col, colour);
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == colour) {
                count++;
            }
        }
    }

    return count;
}

int calculateScorePosition(char board[][26], int n, char row, char col, char colour) {
    char boardCopy[26][26];
    int score = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            boardCopy[i][j] = board[i][j];
        }
    }
    score = countAfterFlip(boardCopy, n, row, col, colour) -
        countBeforeFlip(board, n, colour) - 1;
    return score;
}

int makeMove(char board[][26], int n, char turn, int* row, int* col) {
    int score = 0;
    for (int rows = n - 1; rows >= 0; rows--) {
        for (int cols = n - 1; cols >= 0; cols--) {
            if (!validMove(board, n, turn, 'a' + rows, 'a' + cols)) {
                continue;
            }
            if (calculateScorePosition(board, n, 'a' + rows, 'a' + cols, turn) >=
                score) {
                *row = rows;
                *col = cols;
                score = calculateScorePosition(board, n, 'a' + rows, 'a' + cols, turn);
            }
        }
    }
    return 0;
}

char winner(char board[][26], int dimension, char black, char white) {
    if (numberOfPieces(board, dimension, black) > numberOfPieces(board, dimension, white)) {
        return black;
    } else if (numberOfPieces(board, dimension, black) < numberOfPieces(board, dimension, white)) {
        return white;
    } else {
        return 'E';
    }
}

void results(char board[][26], int n, char compColor, char humanColor) {
    if (winner(board, n, compColor, humanColor) == 'E') {
        printf("Draw!\n");
    } else {
        printf("%c player wins.\n", winner(board, n, compColor, humanColor));
    }
}

int main(void) {
    int n;
    char board[26][26];
    char compColor, humanColor;
    bool endGame = false;
    char player = 'B';
    char humanRow, humanCol;
    int compRows = 0;
    int compCols = 0;
    int URow, UCol;
    char URows, UCols;
    int* pointerRow = &URow;
    int* pointerCol = &UCol;

    printf("Enter the board dimension: ");
    scanf("%d", &n);

    printf("Computer plays (B/W): ");
    scanf(" %c", &compColor);

    humanColor = oppositeColor(compColor);

    for (int a = 0; a <= n - 1; a++) {
        for (int b = 0; b <= n - 1; b++) {
            board[a][b] = 'U';
            board[n / 2 - 1][n / 2 - 1] = 'W';
            board[n / 2][n / 2] = 'W';
            board[n / 2][n / 2 - 1] = 'B';
            board[n / 2 - 1][n / 2] = 'B';
        }
    }

    printBoard(board, n);

    while (endGame == false) {
        if (compColor == player) {
            makeMove(board, n, compColor, pointerRow, pointerCol);
            URows = URow + 'a';
            UCols = UCol + 'a';
            flip(board, n, URows, UCols, compColor);
            printf("Computer places %c at %c%c.\n", compColor, URows, UCols);
            printBoard(board, n);
        } else {
            printf("Enter move for colour %c (RowCol): ", player);
            scanf(" %c%c", &humanRow, &humanCol);

            if (validMove(board, n, humanColor, humanRow, humanCol) == false) {
                printf("Invalid move.\n");
                printf("%c player wins.\n", oppositeColor(humanColor));
                endGame = true;
            } else {
                flip(board, n, humanRow, humanCol, humanColor);
                printBoard(board, n);
            }
        }

        if (endGame == false) {
            if (avaliableMoves(board, n, oppositeColor(player))) {
                player = oppositeColor(player);
            } else if (avaliableMoves(board, n, player)) {
                printf("%c player has no valid move.\n", oppositeColor(player));
                player = player;
            } else {
                endGame = true;
                results(board, n, compColor, humanColor);
            }
        }
    }
    return 0;
}

